{"version":3,"sources":["components/Card/index.js","components/Footer/index.js","components/Header/index.js","components/NavBar/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","clickHandler","id","image","name","className","src","alt","onClick","Footer","Header","Navbar","message","score","highScore","href","App","state","isCorrect","boxes","maxScore","handleSaveClick","panels","panelsClicked","filter","panel","clicked","handleIncorrectClick","handleCorrectClick","randomizePokemon","setState","pokemon","sort","a","b","Math","random","messageClass","resetGame","i","length","this","map","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.93e5b9ee.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Card({ clickHandler, id, image, name }) {\n  return (\n    <div className=\"col-4\">\n      <img\n        src={image}\n        alt={name}\n        className=\"selected-card\"\n        onClick={() => clickHandler(id)}\n      />\n    </div>\n  );\n}\n\nexport default Card;","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <div className=\"colors position-relative footer\">\n      <span className=\"text-footer\" />\n    </div>\n  );\n}\n\nexport default Footer;","import React from \"react\";\n\nfunction Header() {\n  return (\n    <div className=\"align-items-center text-center\">\n      <h1 className=\"flicker-1 header-font\">\n        Click on an image to start!\n      </h1>\n    </div>\n  );\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Navbar({ message, score, highScore }) {\n  return (\n    <nav className=\"nav\">\n      <ul className=\"nav-name\">\n        <li className=\"nav-next\">\n          <a\n            className=\"nav-game\"\n            href=\"/\"\n          >\n            Pokemon <br />\n            Memory Game\n          </a>\n        </li>\n        <li\n          id=\"animation-here\"\n          className=\"animate\"\n        >\n          {message}\n        </li>\n        <li className=\"score\">\n          Score: {score} | High Score: {highScore}\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;","import React, {Component} from 'react';\nimport './App.css';\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/NavBar\";\nimport boxes from \"./boxes.json\";\n\n\nclass App extends Component {\n \n    state = {\n      isCorrect: true,\n      boxes: boxes,\n      score: 0,\n      maxScore: 12,\n      highScore: 0,\n      message: \"Click on an image to start\"\n    };\n  \n\n  // click handler function\n  handleSaveClick = id => {\n    // Variable to hold the panels\n    const panels = this.state.boxes;\n    // Search through pokemon panels to find the one that matches the clicked id.\n    const panelsClicked = panels.filter(panel => panel.id === id);\n\n    // If panel isn't clicked\n    if (!panelsClicked[0].clicked) {\n      \n      panelsClicked[0].clicked = true;\n      // register the correct guess\n      this.handleCorrectClick();\n      // animation for correct guess\n    //  this.toggleAnimation(true);\n\n      // randomize pokemon panels\n      this.randomizePokemon(panels);\n\n      this.setState({ panels });\n    } else {\n      this.handleIncorrectClick();\n      //this.toggleAnimation(false);\n    }\n  };\n\n  // randomize the pokemon\n  randomizePokemon = pokemon => {\n    pokemon.sort((a, b) => {\n      return 0.5 - Math.random();\n    });\n  };\n\n  // Handler for correct guesses\n  handleCorrectClick = () => {\n    this.setState({ isCorrect: true });\n    if (this.state.score + 1 > this.state.highScore) {\n      this.setState({ highScore: this.state.highScore + 1 });\n    }\n    if (this.state.score + 1 >= this.state.maxScore) {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"Winner!\",\n        messageClass: \"correct\"\n      });\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"Correct!\",\n        messageClass: \"correct\"\n      });\n    }\n  };\n\n  // Handler for incorrect guesses\n  handleIncorrectClick = () => {\n    this.setState({\n      message: \"Wrong!\",\n      isCorrect: false\n    });\n    // this.toggleIncorrectAnimation();\n    this.resetGame();\n  };\n\n  // Resets the game\n  resetGame = id => {\n    const panels = this.state.boxes;\n    for (let i = 0; i < panels.length; i++) {\n      panels[i].clicked = false;\n    }\n    this.setState({ score: 0 });\n  };\n\n  // Render the App\n  render() {\n    const { message, score, boxes, highScore } = this.state;\n    return (\n      <div className=\"fluid-container\">\n        <Navbar\n          className=\"row\"\n          score={score}\n          highScore={highScore}\n          message={message}\n        />\n        <Header className=\"bg-header row\" />\n\n        <div className=\"row\">\n          {boxes.map(({ id, name, image, clicked }) => (\n            <Card\n              key={id}\n              id={id}\n              name={name}\n              image={image}\n              clicked={clicked}\n              clickHandler={this.handleSaveClick}\n            />\n          ))}\n        </div>\n\n        <Footer className=\"footer-mgn row\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker();\n\n"],"sourceRoot":""}