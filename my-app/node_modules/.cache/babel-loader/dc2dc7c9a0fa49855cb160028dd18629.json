{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/Clicky-Game/my-app/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/NavBar\";\nimport boxes from \"./boxes.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isCorrect: true,\n      boxes: boxes,\n      score: 0,\n      maxScore: 12,\n      highScore: 0,\n      message: \"Click on an image to start\"\n    };\n\n    this.handleSaveClick = id => {\n      // Variable to hold the panels\n      const panels = this.state.boxes; // Search through pokemon panels to find the one that matches the clicked id.\n\n      const panelsClicked = panels.filter(panel => panel.id === id); // If panel isn't clicked\n\n      if (!panelsClicked[0].clicked) {\n        panelsClicked[0].clicked = true; // register the correct guess\n\n        this.handleCorrectClick(); // animation for correct guess\n        //  this.toggleAnimation(true);\n        // randomize pokemon panels\n\n        this.randomizePokemon(panels);\n        this.setState({\n          panels\n        });\n      } else {\n        this.handleIncorrectClick(); //this.toggleAnimation(false);\n      }\n    };\n\n    this.randomizePokemon = pokemon => {\n      pokemon.sort((a, b) => {\n        return 0.5 - Math.random();\n      });\n    };\n\n    this.handleCorrectClick = () => {\n      this.setState({\n        isCorrect: true\n      });\n\n      if (this.state.score + 1 > this.state.highScore) {\n        this.setState({\n          topScore: this.state.highScore + 1\n        });\n      }\n\n      if (this.state.score + 1 >= this.state.maxScore) {\n        this.setState({\n          score: this.state.score + 1,\n          message: \"Winner!\",\n          messageClass: \"correct\"\n        });\n      } else {\n        this.setState({\n          score: this.state.score + 1,\n          message: \"Correct!\",\n          messageClass: \"correct\"\n        });\n      }\n    };\n\n    this.handleIncorrectClick = () => {\n      this.setState({\n        message: \"Wrong!\",\n        isCorrect: false\n      }); // this.toggleIncorrectAnimation();\n\n      this.resetGame();\n    };\n\n    this.resetGame = id => {\n      const panels = this.state.boxes;\n\n      for (let i = 0; i < panels.length; i++) {\n        panels[i].clicked = false;\n      }\n\n      this.setState({\n        score: 0\n      });\n    };\n  }\n\n  // Render the App\n  render() {\n    const {\n      message,\n      score,\n      boxes,\n      highScore\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"fluid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      className: \"row\",\n      score: score,\n      highScore: highScore,\n      message: message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Header, {\n      className: \"bg-header row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, boxes.map(({\n      id,\n      name,\n      image,\n      clicked\n    }) => React.createElement(Card, {\n      key: id,\n      id: id,\n      name: name,\n      image: image,\n      clicked: clicked,\n      clickHandler: this.handleSaveClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }))), React.createElement(Footer, {\n      className: \"footer-mgn row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/admin/Desktop/Clicky-Game/my-app/src/App.js"],"names":["React","Component","Card","Footer","Header","Navbar","boxes","App","state","isCorrect","score","maxScore","highScore","message","handleSaveClick","id","panels","panelsClicked","filter","panel","clicked","handleCorrectClick","randomizePokemon","setState","handleIncorrectClick","pokemon","sort","a","b","Math","random","topScore","messageClass","resetGame","i","length","render","map","name","image"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/NavBar\";\nimport boxes from \"./boxes.json\";\n\n\nclass App extends Component {\n \n    state = {\n      isCorrect: true,\n      boxes: boxes,\n      score: 0,\n      maxScore: 12,\n      highScore: 0,\n      message: \"Click on an image to start\"\n    };\n  \n\n  // click handler function\n  handleSaveClick = id => {\n    // Variable to hold the panels\n    const panels = this.state.boxes;\n    // Search through pokemon panels to find the one that matches the clicked id.\n    const panelsClicked = panels.filter(panel => panel.id === id);\n\n    // If panel isn't clicked\n    if (!panelsClicked[0].clicked) {\n      \n      panelsClicked[0].clicked = true;\n      // register the correct guess\n      this.handleCorrectClick();\n      // animation for correct guess\n    //  this.toggleAnimation(true);\n\n      // randomize pokemon panels\n      this.randomizePokemon(panels);\n\n      this.setState({ panels });\n    } else {\n      this.handleIncorrectClick();\n      //this.toggleAnimation(false);\n    }\n  };\n\n  // randomize the pokemon\n  randomizePokemon = pokemon => {\n    pokemon.sort((a, b) => {\n      return 0.5 - Math.random();\n    });\n  };\n\n  // Handler for correct guesses\n  handleCorrectClick = () => {\n    this.setState({ isCorrect: true });\n    if (this.state.score + 1 > this.state.highScore) {\n      this.setState({ topScore: this.state.highScore + 1 });\n    }\n    if (this.state.score + 1 >= this.state.maxScore) {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"Winner!\",\n        messageClass: \"correct\"\n      });\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"Correct!\",\n        messageClass: \"correct\"\n      });\n    }\n  };\n\n  // Handler for incorrect guesses\n  handleIncorrectClick = () => {\n    this.setState({\n      message: \"Wrong!\",\n      isCorrect: false\n    });\n    // this.toggleIncorrectAnimation();\n    this.resetGame();\n  };\n\n  // Resets the game\n  resetGame = id => {\n    const panels = this.state.boxes;\n    for (let i = 0; i < panels.length; i++) {\n      panels[i].clicked = false;\n    }\n    this.setState({ score: 0 });\n  };\n\n  // Render the App\n  render() {\n    const { message, score, boxes, highScore } = this.state;\n    return (\n      <div className=\"fluid-container\">\n        <Navbar\n          className=\"row\"\n          score={score}\n          highScore={highScore}\n          message={message}\n        />\n        <Header className=\"bg-header row\" />\n\n        <div className=\"row\">\n          {boxes.map(({ id, name, image, clicked }) => (\n            <Card\n              key={id}\n              id={id}\n              name={name}\n              image={image}\n              clicked={clicked}\n              clickHandler={this.handleSaveClick}\n            />\n          ))}\n        </div>\n\n        <Footer className=\"footer-mgn row\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}