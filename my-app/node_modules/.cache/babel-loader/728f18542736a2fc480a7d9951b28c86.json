{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/Clicky-Game/my-app/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handleSaveClick = id => {\n      // Variable to hold the tiles state.\n      const panels = this.state.panels; // Search through character tiles to find the one that matches the clicked id.\n\n      const panelClicked = panels.filter(panel => panel.id === id); // If the tile isn't clicked...\n\n      if (!panelClicked[0].clicked) {\n        // ...set it to now be clicked\n        panelClicked[0].clicked = true; // ...call this function to register the correct guess\n\n        this.handleCorrectClick(); // ...add the bouncy animation for correct guess\n\n        this.toggleAnimation(true); // ... randomize character tiles\n\n        this.randomizeCharacters(panels);\n        this.setState({\n          panels\n        });\n      } else {\n        this.handleIncorrectClick();\n        this.toggleAnimation(false);\n      }\n    };\n\n    this.randomizeCharacters = characters => {\n      characters.sort((a, b) => {\n        return 0.5 - Math.random();\n      });\n    };\n\n    this.handleCorrectClick = () => {\n      this.setState({\n        isCorrect: true\n      });\n\n      if (this.state.score + 1 > this.state.highScore) {\n        this.setState({\n          topScore: this.state.highScore + 1\n        });\n      }\n\n      if (this.state.score + 1 >= this.state.maxScore) {\n        this.setState({\n          score: this.state.score + 1,\n          message: \"Winner!\",\n          messageClass: \"correct\"\n        });\n      } else {\n        this.setState({\n          score: this.state.score + 1,\n          message: \"Correct!\",\n          messageClass: \"correct\"\n        });\n      }\n    };\n\n    this.handleIncorrectClick = () => {\n      this.setState({\n        message: \"Wrong!\",\n        isCorrect: false\n      }); // this.toggleIncorrectAnimation();\n\n      this.resetGame();\n    };\n\n    this.resetGame = id => {\n      const panels = this.state.panels;\n\n      for (let i = 0; i < panels.length; i++) {\n        panels[i].clicked = false;\n      }\n\n      this.setState({\n        score: 0\n      });\n    };\n\n    this.state = {\n      isCorrect: true,\n      panels: panels,\n      score: 0,\n      maxScore: 12,\n      highScore: 0,\n      message: \"Click on an image to start\"\n    };\n  }\n\n  // Render the App component on the page\n  render() {\n    const {\n      message,\n      score,\n      panels,\n      highScore\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"fluid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      className: \"row\",\n      score: score,\n      highScore: highScore,\n      message: message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Header, {\n      className: \"bg-header row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"content-center \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, panels.map(({\n      id,\n      name,\n      image,\n      clicked\n    }) => React.createElement(Card, {\n      key: id,\n      id: id,\n      name: name,\n      image: image,\n      clicked: clicked,\n      clickHandler: this.handleSaveClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }))), React.createElement(Footer, {\n      className: \"footer-mgn row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/admin/Desktop/Clicky-Game/my-app/src/App.js"],"names":["React","Component","Card","Footer","Header","Navbar","App","constructor","handleSaveClick","id","panels","state","panelClicked","filter","panel","clicked","handleCorrectClick","toggleAnimation","randomizeCharacters","setState","handleIncorrectClick","characters","sort","a","b","Math","random","isCorrect","score","highScore","topScore","maxScore","message","messageClass","resetGame","i","length","render","map","name","image"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isCorrect: true,\n      panels: panels,\n      score: 0,\n      maxScore: 12,\n      highScore: 0,\n      message: \"Click on an image to start\"\n    };\n  };\n\n  // Main click handler function\n  handleSaveClick = id => {\n    // Variable to hold the tiles state.\n    const panels = this.state.panels;\n    // Search through character tiles to find the one that matches the clicked id.\n    const panelClicked = panels.filter(panel => panel.id === id);\n\n    // If the tile isn't clicked...\n    if (!panelClicked[0].clicked) {\n      // ...set it to now be clicked\n      panelClicked[0].clicked = true;\n      // ...call this function to register the correct guess\n      this.handleCorrectClick();\n      // ...add the bouncy animation for correct guess\n      this.toggleAnimation(true);\n\n      // ... randomize character tiles\n      this.randomizeCharacters(panels);\n\n      this.setState({ panels });\n    } else {\n      this.handleIncorrectClick();\n      this.toggleAnimation(false);\n    }\n  };\n\n  // Function to randomize the characters\n  randomizeCharacters = characters => {\n    characters.sort((a, b) => {\n      return 0.5 - Math.random();\n    });\n  };\n\n  // Handler for correct guesses/clicks\n  handleCorrectClick = () => {\n    this.setState({ isCorrect: true });\n    if (this.state.score + 1 > this.state.highScore) {\n      this.setState({ topScore: this.state.highScore + 1 });\n    }\n    if (this.state.score + 1 >= this.state.maxScore) {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"Winner!\",\n        messageClass: \"correct\"\n      });\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"Correct!\",\n        messageClass: \"correct\"\n      });\n    }\n  };\n\n  // Handler for incorrect guesses/clicks\n  handleIncorrectClick = () => {\n    this.setState({\n      message: \"Wrong!\",\n      isCorrect: false\n    });\n    // this.toggleIncorrectAnimation();\n    this.resetGame();\n  };\n\n  // Resets the game\n  resetGame = id => {\n    const panels = this.state.panels;\n    for (let i = 0; i < panels.length; i++) {\n      panels[i].clicked = false;\n    }\n    this.setState({ score: 0 });\n  };\n\n  // Render the App component on the page\n  render() {\n    const { message, score, panels, highScore } = this.state;\n    return (\n      <div className=\"fluid-container\">\n        <Navbar\n          className=\"row\"\n          score={score}\n          highScore={highScore}\n          message={message}\n        />\n        <Header className=\"bg-header row\" />\n\n        <div className=\"content-center \">\n          {panels.map(({ id, name, image, clicked }) => (\n            <Card\n              key={id}\n              id={id}\n              name={name}\n              image={image}\n              clicked={clicked}\n              clickHandler={this.handleSaveClick}\n            />\n          ))}\n        </div>\n\n        <Footer className=\"footer-mgn row\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}